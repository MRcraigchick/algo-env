/*

TITLE: <%>title</%>
PLATFORM: <%>platform</%>
DIFFICULTY: <%>difficulty</%>
DESCRIPTION:

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    Paste algorithm description here ....

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  

( PEDAC approach )

------------------------------------
(P)roblem - Understand the problem
------------------------------------

Define the inputs and outputs of the algorithms function.

Input: Expected inputs
Output: Expected outputs 


Refactor:

Re-write the description in a way that helps you understand the problem better.


Rules:

Identify the rules to solving the problem.


Q & A:

Think of possible questions that could clarify the problem more


Mental model: 

Write out several ways you could possibly solve the problem. 

--------------------------
(E)xamples 
--------------------------

Write some examples and the results that would be expected from them.
Here you can think about and define the edge cases.

(arg1) ==> true
(arg2) ==> false
(arg3) ==> true

--------------------------
(D)ata
--------------------------

Describe the data structures that you will be using to solve the problem

 Arrays / Variables: Values and thier types
 Objects / HashTables: Define keys and values with thier types

(eg.): Hash table to map each character of an input string to each key of the table and store it's occurrences as the value
     
      hash_table = { 
            [character]: occurrences in string == type Number
            ...
      }

--------------------------
(A)lgorithm
--------------------------

Write out the algorithm in human language.

1. Step 1

2. Step2

...

--------------------------
(C)ode
--------------------------

Finally, write the algorithm in code and test with many end cases before submitting


1. Brute force attempt -- Don't think about the complexity yet, just write a working algorithm

*/




// Add function here




/* 

2. Refactor and optimise -- Once you have a working algorithm, can you refactor it and optimise
                            for time and space complexity ( Big O Complexity ) ?
*/




// Add function here